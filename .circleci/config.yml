version: 2.1
# This code is licensed from CircleCI to the user under the MIT license. See
# https://circleci.com/orbs/registry/licensing for details.
commands:
  dark_deploy:
    parameters:
      appname:
        description: App Name
        type: string
      dark_subdomain:
        default: dark
        description: Cloud Foundry dark domain to prefix domain (i.e. <dark_subdomain>.<dark_domain>,
          defaults to "dark")
        type: string
      dark_domain:
        description: Cloud Foundry domain registered to handle routes for this space
          (a "dark" or "live" sub-domain will be used in conjunction with this, i.e.
          <dark_subdomain>.<dark_domain>)
        type: string
      manifest:
        default: ''
        description: The Cloud Foundry manifest for this environment
        type: string
      package:
        description: path to the asset/package to push
        type: string
      vars:
        default: ''
        description: Vars file for variable substitution.
        type: string
      env_prefix:
        description: prefix for enviroment variables
        type: string
    steps:
      - run:
          command: |
            cf push --no-start "<<parameters.appname>>-dark" -f "<<parameters.manifest>>"<<# parameters.vars>> --vars-file "<<parameters.vars>>"<</ parameters.vars>> -p "<<parameters.package>>"<<# parameters.dark_subdomain>> -n "<<parameters.dark_subdomain>>"<</ parameters.dark_subdomain>> -d "<<parameters.dark_domain>>"
            cf set-env "<<parameters.appname>>-dark" CIRCLE_BUILD_NUM "${CIRCLE_BUILD_NUM}"
            cf set-env "<<parameters.appname>>-dark" CIRCLE_SHA1 "${CIRCLE_SHA1}"
            cf set-env "<<parameters.appname>>-dark" CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID}"
            cf set-env "<<parameters.appname>>-dark" CIRCLE_PROJECT_USERNAME "${CIRCLE_PROJECT_USERNAME}"
            cf set-env "<<parameters.appname>>-dark" CIRCLE_PROJECT_REPONAME "${CIRCLE_PROJECT_REPONAME}"
            cf set-env "<<parameters.appname>>-dark" AWS_ACCESS_KEY_ID "${<<parameters.env_prefix>>_AWS_ACCESS_KEY_ID}"
            cf set-env "<<parameters.appname>>-dark" AWS_SECRET_ACCESS_KEY "${<<parameters.env_prefix>>_AWS_SECRET_ACCESS_KEY}"
            cf set-env "<<parameters.appname>>-dark" NODE_ENV "${<<parameters.env_prefix>>_NODE_ENV}"

            if [ -n "${<<parameters.env_prefix>>_DB_HOST}" ]; then
                cf set-env "<<parameters.appname>>-dark" DB_HOST "${<<parameters.env_prefix>>_DB_HOST}"
            fi

            if [ -n "${<<parameters.env_prefix>>_DB_NAME}" ]; then
                cf set-env "<<parameters.appname>>-dark" DB_NAME "${<<parameters.env_prefix>>_DB_NAME}"
            fi

            if [ -n "${<<parameters.env_prefix>>_DB_USER}" ]; then
                cf set-env "<<parameters.appname>>-dark" DB_USER "${<<parameters.env_prefix>>_DB_USER}"
            fi

            if [ -n "${<<parameters.env_prefix>>_DB_PASS}" ]; then
                cf set-env "<<parameters.appname>>-dark" DB_PASS "${<<parameters.env_prefix>>_DB_PASS}"
            fi

            if [ -n "${<<parameters.env_prefix>>_SQREEN_APP_NAME}" ]; then
                cf set-env "<<parameters.appname>>-dark" SQREEN_APP_NAME "${<<parameters.env_prefix>>_SQREEN_APP_NAME}"
            fi

            if [ -n "${<<parameters.env_prefix>>_SQREEN_TOKEN}" ]; then
                cf set-env "<<parameters.appname>>-dark" SQREEN_TOKEN "${<<parameters.env_prefix>>_SQREEN_TOKEN}"
            fi

            # Push as "dark" instance (URL in manifest)
            cf start "<<parameters.appname>>-dark"
            # Ensure dark route is exclusive to dark app
            cf unmap-route "<<parameters.appname>>" "<<parameters.dark_domain>>"<<# parameters.dark_subdomain>> -n "<<parameters.dark_subdomain>>"<</ parameters.dark_subdomain>> || echo "Already exclusive"
          name: Cloud Foundry Dark Deployment
  install:
    description: Installs and authenticates with the latest CLI version if not present.
    parameters:
      endpoint:
        default: https://api.run.pivotal.io
        description: The domain of the Cloud Foundry runtime API endpoint. Defaults
          to https://api.run.pivotal.io
        type: string
      org:
        description: Cloud Foundry org to target
        type: string
      space:
        description: Cloud Foundry space to target
        type: string
    steps:
      - run:
          command: |
            : "${CF_USERNAME?Cloud Foundry username and password must be set as Environment variables before running this command.}"
            : "${CF_PASSWORD?Cloud Foundry username and password must be set as Environment variables before running this command.}"
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cf -v
            cf api "<<parameters.endpoint>>"
            cf auth "$CF_USERNAME" "$CF_PASSWORD"
            cf target -o "<<parameters.org>>" -s "<<parameters.space>>"
          name: Setup CF CLI
  live_deploy:
    parameters:
      appname:
        description: App Name
        type: string
      live_domain:
        description: Cloud Foundry domain (a "live" sub-domain will be used on this.)
        type: string
      live_subdomain:
        default: www
        description: Cloud Foundry live subdomain to prefix domain (i.e. <live_subdomain>.<live_domain>,
          defaults to "wwww")
        type: string
    steps:
      - run:
          command: |
            # Send "real" url to new version
            cf map-route "<<parameters.appname>>-dark" "<<parameters.live_domain>>"<<# parameters.live_subdomain>> -n "<<parameters.live_subdomain>>"<</ parameters.live_subdomain>>
            # Stop sending traffic to previous version
            cf unmap-route "<<parameters.appname>>" "<<parameters.live_domain>>"<<# parameters.live_subdomain>> -n "<<parameters.live_subdomain>>"<</ parameters.live_subdomain>>  || echo "Could not unmap route for previous app"
            # stop previous version
            cf stop "<<parameters.appname>>" || echo "Could not stop previous app"
            # delete previous version
            cf delete "<<parameters.appname>>" -f
            # Switch name of "dark" version to claim correct name
            cf rename "<<parameters.appname>>-dark" "<<parameters.appname>>"
          name: Cloud Foundry - Re-route live Domain

orbs:
  node: circleci/node@3.0.0

jobs:
  install:
    working_directory: ~/project
    docker:
      - image: circleci/node:12.19.0-browsers
    environment: NODE_OPTIONS=--max_old_space_size=4096
    steps:
      - checkout
      - node/install-packages:
          cache-path: ~/project/node_modules
          cache-version: v2
      - run: |
          if [ -n "$CIRCLE_TAG" ] || [ "$CIRCLE_BRANCH" == 'live' ]; then
              npm run build:prod
          else
              npm run build:test
          fi
      - persist_to_workspace:
          root: .
          paths:
            - dist
  test_frontend:
    docker:
      - image: circleci/node:12.19.0-browsers
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-deps-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          command: sudo apt-get install -yq libxss1
      - run:
          command: npm run test
  test_backend:
    docker:
      - image: circleci/node:12.19.0-browsers
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-deps-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          command: npm run server:test:unit
  performance:
    docker:
      - image: circleci/node:12.19.0-browsers
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - node-deps-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          command: $(npm bin)/lhci autorun
  blue_green:
    description: Execute a blue/green deploy  in a single job. Expects either build_steps
      or workspace_path for assets to deploy.
    docker:
      - image: circleci/node:lts
    parameters:
      appname:
        description: App Name
        type: string
      build_steps:
        default: []
        description: Steps to generate application package or files. Alternately provide
          `workspace_path`
        type: steps
      dark_subdomain:
        default: dark
        description: Cloud Foundry dark domain to prefix domain (i.e. <dark_subdomain>.<dark_domain>,
          defaults to "dark")
        type: string
      dark_domain:
        description: Cloud Foundry domain registered to handle routes for this space
          (a "dark" sub-domain will be used in conjunction with this, i.e.
          <dark_subdomain>.<dark_domain>)
        type: string
      live_domain:
        description: Cloud Foundry domain registered to handle routes for this space
          (a "live" sub-domain will be used in conjunction with this, i.e.
          <dark_subdomain>.<live_domain>)
        type: string
      endpoint:
        default: https://api.run.pivotal.io
        description: The domain of the Cloud Foundry runtime API endpoint. Defaults
          to https://api.run.pivotal.io
        type: string
      live_subdomain:
        default: www
        description: Cloud Foundry live subdomain to prefix domain (i.e. <live_subdomain>.<live_domain>,
          defaults to "www")
        type: string
      manifest:
        default: ''
        description: The Cloud Foundry manifest for this environment
        type: string
      org:
        description: Cloud Foundry Org to target
        type: string
      package:
        description: path to the asset/package to push
        type: string
      space:
        description: Cloud Foundry space to target
        type: string
      validate_steps:
        default: []
        description: Optional steps to run between the dark and live deployments.
        type: steps
      vars:
        default: ''
        description: Vars file for variable substitution.
        type: string
      workspace_path:
        default: ''
        description: The key of a workflow workspace which contains artifact. Alternately
          provide `build_steps`
        type: string
      env_prefix:
        description: prefix for enviroment variables
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-deps-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - when:
          condition: <<parameters.build_steps>>
          steps: << parameters.build_steps >>
      - when:
          condition: <<parameters.workspace_path>>
          steps:
            - attach_workspace:
                at: <<parameters.workspace_path>>
      - install:
          endpoint: <<parameters.endpoint>>
          org: <<parameters.org>>
          space: <<parameters.space>>
      - dark_deploy:
          appname: <<parameters.appname>>
          dark_subdomain: <<parameters.dark_subdomain>>
          dark_domain: <<parameters.dark_domain>>
          manifest: <<parameters.manifest>>
          package: <<parameters.package>>
          vars: <<parameters.vars>>
          env_prefix: <<parameters.env_prefix>>
      - when:
          condition: <<parameters.validate_steps>>
          steps: << parameters.validate_steps >>
      - live_deploy:
          appname: <<parameters.appname>>
          live_subdomain: <<parameters.live_subdomain>>
          live_domain: <<parameters.live_domain>>
  sentry_release:
    docker:
      - image: circleci/node:12.19.0-browsers
    environment:
      SENTRY_ORG: skills-for-care
      SENTRY_PROJECT: skills-for-care
    parameters:
      env:
        description: Environment
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: |
          curl -sL https://sentry.io/get-cli/ | bash
          export SENTRY_RELEASE=$(sentry-cli releases propose-version)
          sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
          sentry-cli releases set-commits --auto $SENTRY_RELEASE
          sentry-cli releases files $SENTRY_RELEASE upload-sourcemaps dist
          sentry-cli releases finalize $SENTRY_RELEASE
workflows:
  build-test-deploy:
    jobs:
      - install:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
      - test_frontend:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
          requires:
            - install
      - test_backend:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
          requires:
            - install
      - performance:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
          requires:
            - install
      - blue_green:
          name: blue_green_benchmarks
          appname: sfcbenchmarks
          env_prefix: SFC_BENCHMARKS
          requires:
            - test_frontend
            - test_backend
            - performance
          filters:
            branches:
              only:
                - feat/benchmarks
          endpoint: https://api.cloud.service.gov.uk
          org: dhsc-skills-for-care-nmds-sc-2
          space: sandbox
          manifest: manifest.benchmarks.yml
          package: '.'
          dark_subdomain: sfcbenchmarks-dark
          dark_domain: cloudapps.digital
          live_subdomain: sfcbenchmarks
          live_domain: cloudapps.digital
          workspace_path: .
      - blue_green:
          name: blue_green_staging
          appname: sfcstaging
          env_prefix: SFC_STAGING
          requires:
            - test_frontend
            - test_backend
            - performance
          filters:
            branches:
              only:
                - test
          endpoint: https://api.cloud.service.gov.uk
          org: dhsc-skills-for-care-nmds-sc-2
          space: sandbox
          manifest: manifest.test.yml
          package: '.'
          dark_subdomain: sfcstaging-dark
          dark_domain: cloudapps.digital
          live_subdomain: sfcstaging
          live_domain: cloudapps.digital
          workspace_path: .
      - blue_green:
          name: preprod_deploy
          appname: sfcpreprod
          env_prefix: SFC_PREPROD
          requires:
            - test_frontend
            - test_backend
            - performance
          filters:
            # ignore any commit on any branch by default
            branches:
              only:
                - live
          endpoint: https://api.cloud.service.gov.uk
          org: dhsc-skills-for-care-nmds-sc-2
          space: production
          manifest: manifest.preprod.yml
          package: '.'
          dark_subdomain: sfcpreprod-dark
          dark_domain: cloudapps.digital
          live_subdomain: sfcpreprod
          live_domain: cloudapps.digital
          workspace_path: .
      - hold_prod:
          type: approval
          requires:
            - test_frontend
            - test_backend
            - performance
          filters:
            # ignore any commit on any branch by default
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
      - blue_green:
          name: prod_deploy
          appname: sfcprod
          env_prefix: SFC_PROD
          requires:
            - hold_prod
          filters:
            # ignore any commit on any branch by default
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
          endpoint: https://api.cloud.service.gov.uk
          org: dhsc-skills-for-care-nmds-sc-2
          space: production
          manifest: manifest.prod.yml
          package: '.'
          dark_subdomain: sfcprod-dark
          dark_domain: cloudapps.digital
          live_subdomain: asc-wds
          live_domain: skillsforcare.org.uk
          workspace_path: .
      - sentry_release:
          requires:
            - blue_green_benchmarks
          filters:
            branches:
              only:
                - feat/benchmarks
          env: development
      - sentry_release:
          requires:
            - blue_green_staging
          filters:
            branches:
              only:
                - test
          env: test
      - sentry_release:
          requires:
            - preprod_deploy
          filters:
            branches:
              only:
                - live
          env: preproduction
      - sentry_release:
          requires:
            - prod_deploy
          filters:
            # ignore any commit on any branch by default
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
          env: production
